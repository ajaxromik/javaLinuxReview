::::::::::::::
Lab2Status.txt
::::::::::::::
Problem 1: compiles, runs correctly on all provided input
Problem 2: compiles, runs correctly on all provided input
Problem 3: Completed and attached in ListInterfaceRelatedArrayListCode
Problem 4: Complete
Extra Credit: Complete::::::::::::::
Lab2Conclusions.txt
::::::::::::::
I learned about more efficient ways to deal with collections.
I also felt like I learned what the behing-the-scenes of collections looks like.
I did not exactly expect to hold the variable numItems, but it
was still valuable to really see it all in action.
I also learned that whoever wrote ArrayList has a very, 
very different coding style from me.

Doing the Extra Credit made me realize that System.arraycopy is fast,
although the parameters were a little confusing at first.::::::::::::::
Lab2P1Driver.java
::::::::::::::
import java.io.*;

/*
 * Purpose: Data Structure and Algorithms Lab 2 Problem 1
 * Status: Complete and thoroughly tested
 * Last update: 09/19/22
 * Submitted:  09/19/22
 * Comment: test suite and sample run attached
 * Comment: I declare that this is entirely my own work
 * @author: William Carr
 * @version: 2023.09.19
 */

public class Lab2P1Driver {
    
    static BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));

    public static void main(String[] args) throws NumberFormatException, IOException {

        ListArrayBasedPlus myList = new ListArrayBasedPlus();

        System.out.println("Select from the following menu:\n"
                           +"\t0. Exit program\n"
                           +"\t1. Insert item into the list\n"
                           +"\t2. Remove item from the list\n"
                           +"\t3. Get item from the list\n"
                           +"\t4. Clear the list\n"
                           +"\t5. Print size and content of the list\n"
                           +"\t6. Reverse the list\n");

        int selection;
        boolean continuing = true;
        do {

            System.out.print("Make your menu selection now: ");
            selection = Integer.parseInt(stdin.readLine().trim());
            System.out.println(selection);

            switch(selection) {
            case 1:
                addToList(myList);
                break;
            case 2:
                removeFromList(myList);
                break;
            case 3:
                getFromList(myList);
                break;
            case 4:
                emptyList(myList);
                break;
            case 5:
                printList(myList);
                break;
            case 6:
                reverseList(myList);
                break;
            default: // continuing unless told to stop
                continuing = false;
                System.out.println("Exiting program... Goodbye!");
                break;
            }

        } while(continuing);

    }

    public static void addToList(ListInterface list) throws IOException{
        System.out.print("You are now inserting an item"+
                         " into the list.\n\tEnter item: ");
        String itemName = stdin.readLine().trim();
        System.out.println(itemName);

        System.out.print("\tEnter position to insert item in: ");
        int position = Integer.parseInt(stdin.readLine().trim());
        System.out.println(position);
        if(position < 0 || position > list.size())
            System.out.println("Position specified is out of range!\n");
        else {
            list.add(position, itemName);
            System.out.printf("Item %s inserted into"+
                              " position %d in the list.%n%n", itemName, position);
        }
    }

    public static void removeFromList(ListInterface list) throws IOException{
        System.out.print("\tEnter position to remove item from: ");
        int position = Integer.parseInt(stdin.readLine().trim());
        System.out.println(position);
        if(position < 0 || position >= list.size())
            System.out.println("Position specified is out of range!\n");
        else {
            System.out.printf("Item %s removed from"+
                                " position %d in the list.%n%n", list.remove(position).toString(), position);
        }
    }

    public static void getFromList(ListInterface list) throws IOException{
        System.out.print("\tEnter position to retrieve item from: ");
        int position = Integer.parseInt(stdin.readLine().trim());
        System.out.println(position);
        if(position < 0 || position >= list.size())
            System.out.println("Position specified is out of range!\n");
        else {
            System.out.printf("Item %s retrieved from"+
                              " position %d in the list.%n%n", list.get(position).toString(), position);
        }
    }

    public static void emptyList(ListInterface list) {
        list.removeAll();
        System.out.println();
    }

    /**
     * Prints list after checking for null/empty
     * @param list
     */
    public static void printList(ListInterface list) {
        if(list == null || list.size() == 0)
            System.out.println("\tList is empty.\n");
        else
            System.out.printf("\tList of size %d has the following items: %s%n%n",
                              list.size(), list.toString());
    }

    public static void reverseList(ListArrayBasedPlus list) {
        list.reverse();
        System.out.println("List reversed\n");
    }

}::::::::::::::
ListArrayBasedPlus.java
::::::::::::::

/*
 * Purpose: Data Structure and Algorithms Lab 2 Problem 1
 * Status: Complete and thoroughly tested
 * Last update: 09/19/22
 * Submitted:  09/19/22
 * Comment: test suite and sample run attached
 * Comment: I declare that this is entirely my own work
 * @author: William Carr
 * @version: 2023.09.19
 */

public class ListArrayBasedPlus extends ListArrayBased {

    /**
     * Returns a String version of the items in the list separated by a space
     */
    public String toString() {
        StringBuilder result = new StringBuilder();
        for(int i = 0; i < numItems; i++) {
            result.append(((i == 0) ? "" : " ") + items[i]);
        }
        return result.toString();
    }

    /**
     * Reverses the list in the superclass
     */
    public void reverse() {
        for(int i = 0; i < numItems/2; i ++) {
            Object temp = items[i];
            items[i] = items[numItems-1-i];
            items[numItems-1-i] = temp;
        }
    }

    public void add(int index, Object item) {
        resize(); // will check if it's needed anyways
        super.add(index, item);
    }

    /**
     * Doubles the size of the items field when the list reaches its max
     */
    public void resize() {
        int currentLen = items.length;
        if(numItems == currentLen) { // if max is reached
            Object[] tempItems = new Object[currentLen*2];
            for(int i = 0; i < numItems; i++) {
                tempItems[i] = items[i];
            }
            //after transferring data to items, move it into items
            items = tempItems;
        }
    }
}::::::::::::::
ListArrayBased.java
::::::::::::::
// ********************************************************
// Array-based implementation of the ADT list.
// *********************************************************
public class ListArrayBased implements ListInterface
{

    private static final int MAX_LIST = 3;
    protected Object []items;  // an array of list items
    protected int numItems;  // number of items in list

    public ListArrayBased()
    {
        items = new Object[MAX_LIST];
        numItems = 0;
    }  // end default constructor

    public boolean isEmpty()
    {
        return (numItems == 0);
    } // end isEmpty

    public int size()
    {
        return numItems;
    }  // end size

    public void removeAll()
    {
        // Creates a new array; marks old array for
        // garbage collection.
        items = new Object[MAX_LIST];
        numItems = 0;
    } // end removeAll

    public void add(int index, Object item)
    throws  ListIndexOutOfBoundsException
    {
        if (numItems == items.length) //fixes implementation errors  //fixes programming style
        {
            throw new ListException("ListException on add");
        }  // end if
        if (index >= 0 && index <= numItems)
        {
            // make room for new element by shifting all items at
            // positions >= index toward the end of the
            // list (no shift if index == numItems+1)
            for (int pos = numItems-1; pos >= index; pos--)  //textbook code modified to eliminate logic error causing ArrayIndexOutOfBoundsException
            {
                items[pos+1] = items[pos];
            } // end for
            // insert new item
            items[index] = item;
            numItems++;
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on add");
        }  // end if
    } //end add

    public Object get(int index)
    throws ListIndexOutOfBoundsException
    {
        if (index >= 0 && index < numItems)
        {
            return items[index];
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on get");
        }  // end if
    } // end get

    public Object remove(int index)
    throws ListIndexOutOfBoundsException
    {   Object result;
        if (index >= 0 && index < numItems)
        {
            // delete item by shifting all items at
            // positions > index toward the beginning of the list
            // (no shift if index == size)
            result = items[index];
            for (int pos = index+1; pos < numItems; pos++) //textbook code modified to eliminate logic error causing ArrayIndexOutOfBoundsException

            {
                items[pos-1] = items[pos];
            }  // end for
            numItems--;
            items[numItems] = null;  //fixes memory leak
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on remove");
        }  // end if
        return result;
    } //end remove
}::::::::::::::
ListException.java
::::::::::::::
public class ListException extends RuntimeException
{
    public ListException(String s)
    {
        super(s);
    }  // end constructor
}  // end ListException::::::::::::::
ListInterface.java
::::::::::::::
// ********************************************************
// Interface ListInterface for the ADT list.
// *********************************************************
public interface ListInterface
{
    boolean isEmpty();
    int size();
    void add(int index, Object item) throws ListIndexOutOfBoundsException;
    Object get(int index) throws ListIndexOutOfBoundsException;
    Object remove(int index) throws ListIndexOutOfBoundsException;
    void removeAll();
    String toString();
}  // end ListInterface::::::::::::::
ListIndexOutOfBoundsException.java
::::::::::::::
public class ListIndexOutOfBoundsException
    extends IndexOutOfBoundsException
{
    public ListIndexOutOfBoundsException(String s)
    {
        super(s);
    }  // end constructor
}  // end ListIndexOutOfBoundsException
::::::::::::::
Lab2P1Sampleruns.txt
::::::::::::::
Select from the following menu:
	0. Exit program
	1. Insert item into the list
	2. Remove item from the list
	3. Get item from the list
	4. Clear the list
	5. Print size and content of the list
	6. Reverse the list

Make your menu selection now: 5
	List is empty.

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Data
	Enter position to insert item in: 0
Item Data inserted into position 0 in the list.

Make your menu selection now: 5
	List of size 1 has the following items: Data

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Beverly
	Enter position to insert item in: 0
Item Beverly inserted into position 0 in the list.

Make your menu selection now: 5
	List of size 2 has the following items: Beverly Data

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Jean-Luc
	Enter position to insert item in: 4
Position specified is out of range!

Make your menu selection now: 5
	List of size 2 has the following items: Beverly Data

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Jean-Luc
	Enter position to insert item in: 2
Item Jean-Luc inserted into position 2 in the list.

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Geordi
	Enter position to insert item in: 1
Item Geordi inserted into position 1 in the list.

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Worf
	Enter position to insert item in: 3
Item Worf inserted into position 3 in the list.

Make your menu selection now: 5
	List of size 5 has the following items: Beverly Geordi Data Worf Jean-Luc

Make your menu selection now: 6
List reversed

Make your menu selection now: 5
	List of size 5 has the following items: Jean-Luc Worf Data Geordi Beverly

Make your menu selection now: 2
	Enter position to remove item from: 5
Position specified is out of range!

Make your menu selection now: 2
	Enter position to remove item from: 3
Item Geordi removed from position 3 in the list.

Make your menu selection now: 5
	List of size 4 has the following items: Jean-Luc Worf Data Beverly

Make your menu selection now: 2
	Enter position to remove item from: 0
Item Jean-Luc removed from position 0 in the list.

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Will
	Enter position to insert item in: 1
Item Will inserted into position 1 in the list.

Make your menu selection now: 5
	List of size 4 has the following items: Worf Will Data Beverly

Make your menu selection now: 3
	Enter position to retrieve item from: 2
Item Data retrieved from position 2 in the list.

Make your menu selection now: 3
	Enter position to retrieve item from: 0
Item Worf retrieved from position 0 in the list.

Make your menu selection now: 3
	Enter position to retrieve item from: 7
Position specified is out of range!

Make your menu selection now: 5
	List of size 4 has the following items: Worf Will Data Beverly

Make your menu selection now: 6
List reversed

Make your menu selection now: 5
	List of size 4 has the following items: Beverly Data Will Worf

Make your menu selection now: 4

Make your menu selection now: 5
	List is empty.

Make your menu selection now: 0
Exiting program... Goodbye!
::::::::::::::
Lab2P2Driver.java
::::::::::::::
import java.io.*;

/*
 * Purpose: Data Structure and Algorithms Lab 2 Problem 2
 * Status: Complete and thoroughly tested
 * Last update: 09/19/22
 * Submitted:  09/19/22
 * Comment: test suite and sample run attached
 * Comment: I declare that this is entirely my own work
 * @author: William Carr
 * @version: 2023.09.19
 */

public class Lab2P2Driver {

    static BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));

    public static void main(String[] args) throws NumberFormatException, IOException {

        ListArrayListBasedPlus myList = new ListArrayListBasedPlus();

        System.out.println("Select from the following menu:\n"
                           +"\t0. Exit program\n"
                           +"\t1. Insert item into the list\n"
                           +"\t2. Remove item from the list\n"
                           +"\t3. Get item from the list\n"
                           +"\t4. Clear the list\n"
                           +"\t5. Print size and content of the list\n"
                           +"\t6. Reverse the list\n");

        int selection;
        boolean continuing = true;
        do {

            System.out.print("Make your menu selection now: ");
            selection = Integer.parseInt(stdin.readLine().trim());
            System.out.println(selection);

            switch(selection) {
            case 1:
                addToList(myList);
                break;
            case 2:
                removeFromList(myList);
                break;
            case 3:
                getFromList(myList);
                break;
            case 4:
                emptyList(myList);
                break;
            case 5:
                printList(myList);
                break;
            case 6:
                reverseList(myList);
                break;
            default: // continuing unless told to stop
                continuing = false;
                System.out.println("Exiting program... Goodbye!");
                break;
            }

        } while(continuing);

    }

    public static void addToList(ListInterface list) throws IOException{
        System.out.print("You are now inserting an item"+
                         " into the list.\n\tEnter item: ");
        String itemName = stdin.readLine().trim();
        System.out.println(itemName);

        System.out.print("\tEnter position to insert item in: ");
        int position = Integer.parseInt(stdin.readLine().trim());
        System.out.println(position);
        if(position < 0 || position > list.size())
            System.out.println("Position specified is out of range!\n");
        else {
            list.add(position, itemName);
            System.out.printf("Item %s inserted into"+
                              " position %d in the list.%n%n", itemName, position);
        }
    }

    public static void removeFromList(ListInterface list) throws IOException{
        System.out.print("\tEnter position to remove item from: ");
        int position = Integer.parseInt(stdin.readLine().trim());
        System.out.println(position);
        if(position < 0 || position >= list.size())
            System.out.println("Position specified is out of range!\n");
        else {
            System.out.printf("Item %s removed from"+
                                " position %d in the list.%n%n", list.remove(position).toString(), position);
        }
    }

    public static void getFromList(ListInterface list) throws IOException{
        System.out.print("\tEnter position to retrieve item from: ");
        int position = Integer.parseInt(stdin.readLine().trim());
        System.out.println(position);
        if(position < 0 || position >= list.size())
            System.out.println("Position specified is out of range!\n");
        else {
            System.out.printf("Item %s retrieved from"+
                              " position %d in the list.%n%n", list.get(position).toString(), position);
        }
    }

    public static void emptyList(ListInterface list) {
        list.removeAll();
        System.out.println();
    }

    /**
     * Prints list after checking for null/empty
     * @param list
     */
    public static void printList(ListInterface list) {
        if(list == null || list.size() == 0)
            System.out.println("\tList is empty.\n");
        else
            System.out.printf("\tList of size %d has the following items: %s%n%n",
                              list.size(), list.toString());
    }

    public static void reverseList(ListArrayListBasedPlus list) {
        list.reverse();
        System.out.println("List reversed\n");
    }

}::::::::::::::
ListArrayListBased.java
::::::::::::::
import java.util.ArrayList;

/*
 * Purpose: Data Structure and Algorithms Lab 2 Problem 2
 * Status: Complete and thoroughly tested
 * Last update: 09/19/22
 * Submitted:  09/19/22
 * Comment: test suite and sample run attached
 * Comment: I declare that this is entirely my own work
 * @author: William Carr
 * @version: 2023.09.19
 */

public class ListArrayListBased implements ListInterface {

    protected ArrayList<Object> items;

    public ListArrayListBased() {
        items = new ArrayList<Object>();
    }

    public boolean isEmpty() {
        return items.isEmpty();
    }

    public int size() {
        return items.size();
    }

    public void add(int index, Object item) throws ListIndexOutOfBoundsException {
        items.add(index, item);
    }

    public Object get(int index) throws ListIndexOutOfBoundsException {
        return items.get(index);
    }

    public Object remove(int index) throws ListIndexOutOfBoundsException {
        return items.remove(index);
    }

    public void removeAll() {
        items.clear();
    }

}::::::::::::::
ListArrayListBasedPlus.java
::::::::::::::
import java.util.ArrayList;

/*
 * Purpose: Data Structure and Algorithms Lab 2 Problem 2
 * Status: Complete and thoroughly tested
 * Last update: 09/19/22
 * Submitted:  09/19/22
 * Comment: test suite and sample run attached
 * Comment: I declare that this is entirely my own work
 * @author: William Carr
 * @version: 2023.09.19
 */

public class ListArrayListBasedPlus extends ListArrayListBased {

    public String toString() {
        return items.toString();
    }

    public void reverse() {
        int size = items.size();
        for(int i = 0; i < size/2; i++) {
            Object temp = items.get(i);
            items.set(i, items.get(size-1-i));
            items.set(size-1-i, temp);
        }
    }

    public void add(int index, Object item) {
        resize();
        super.add(index, item);
    }

    public void resize() {
        items.ensureCapacity(items.size()*2);
    }

}::::::::::::::
Lab2P2Sampleruns.txt
::::::::::::::
Select from the following menu:
	0. Exit program
	1. Insert item into the list
	2. Remove item from the list
	3. Get item from the list
	4. Clear the list
	5. Print size and content of the list
	6. Reverse the list

Make your menu selection now: 5
	List is empty.

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Data
	Enter position to insert item in: 0
Item Data inserted into position 0 in the list.

Make your menu selection now: 5
	List of size 1 has the following items: [Data]

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Beverly
	Enter position to insert item in: 0
Item Beverly inserted into position 0 in the list.

Make your menu selection now: 5
	List of size 2 has the following items: [Beverly, Data]

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Jean-Luc
	Enter position to insert item in: 4
Position specified is out of range!

Make your menu selection now: 5
	List of size 2 has the following items: [Beverly, Data]

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Jean-Luc
	Enter position to insert item in: 2
Item Jean-Luc inserted into position 2 in the list.

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Geordi
	Enter position to insert item in: 1
Item Geordi inserted into position 1 in the list.

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Worf
	Enter position to insert item in: 3
Item Worf inserted into position 3 in the list.

Make your menu selection now: 5
	List of size 5 has the following items: [Beverly, Geordi, Data, Worf, Jean-Luc]

Make your menu selection now: 6
List reversed

Make your menu selection now: 5
	List of size 5 has the following items: [Jean-Luc, Worf, Data, Geordi, Beverly]

Make your menu selection now: 2
	Enter position to remove item from: 5
Position specified is out of range!

Make your menu selection now: 2
	Enter position to remove item from: 3
Item Geordi removed from position 3 in the list.

Make your menu selection now: 5
	List of size 4 has the following items: [Jean-Luc, Worf, Data, Beverly]

Make your menu selection now: 2
	Enter position to remove item from: 0
Item Jean-Luc removed from position 0 in the list.

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Will
	Enter position to insert item in: 1
Item Will inserted into position 1 in the list.

Make your menu selection now: 5
	List of size 4 has the following items: [Worf, Will, Data, Beverly]

Make your menu selection now: 3
	Enter position to retrieve item from: 2
Item Data retrieved from position 2 in the list.

Make your menu selection now: 3
	Enter position to retrieve item from: 0
Item Worf retrieved from position 0 in the list.

Make your menu selection now: 3
	Enter position to retrieve item from: 7
Position specified is out of range!

Make your menu selection now: 5
	List of size 4 has the following items: [Worf, Will, Data, Beverly]

Make your menu selection now: 6
List reversed

Make your menu selection now: 5
	List of size 4 has the following items: [Beverly, Data, Will, Worf]

Make your menu selection now: 4

Make your menu selection now: 5
	List is empty.

Make your menu selection now: 0
Exiting program... Goodbye!
::::::::::::::
ListInterfaceRelatedArrayListCode.txt
::::::::::::::

public boolean isEmpty() {
    return size == 0;
}



public int size() {
    return size;
}



private static int calculateCapacity(Object[] elementData, int minCapacity) {
    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
        return Math.max(DEFAULT_CAPACITY, minCapacity);
    }
    return minCapacity;
}

private void ensureCapacityInternal(int minCapacity) {
    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));
}

private void ensureExplicitCapacity(int minCapacity) {
    modCount++;

    // overflow-conscious code
    if (minCapacity - elementData.length > 0)
        grow(minCapacity);
}

public void add(int index, E element) {
    rangeCheckForAdd(index);

    ensureCapacityInternal(size + 1);  // Increments modCount!!
    System.arraycopy(elementData, index, elementData, index + 1,
                     size - index);
    elementData[index] = element;
    size++;
}



private void rangeCheck(int index) {
    if (index >= size)
        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
}

private String outOfBoundsMsg(int index) {
    return "Index: "+index+", Size: "+size;
}

@SuppressWarnings("unchecked")
E elementData(int index) {
    return (E) elementData[index];
}

public E get(int index) {
    rangeCheck(index);

    return elementData(index);
}



public E remove(int index) {
    rangeCheck(index);

    modCount++;
    E oldValue = elementData(index);

    int numMoved = size - index - 1;
    if (numMoved > 0)
        System.arraycopy(elementData, index+1, elementData, index,
                         numMoved);
    elementData[--size] = null; // clear to let GC do its work

    return oldValue;
}



public void clear() {
    modCount++;

    // clear to let GC do its work
    for (int i = 0; i < size; i++)
        elementData[i] = null;

    size = 0;
}



public String toString() {
    Iterator<E> it = iterator();
    if (! it.hasNext())
        return "[]";

    StringBuilder sb = new StringBuilder();
    sb.append('[');
    for (;;) {
        E e = it.next();
        sb.append(e == this ? "(this Collection)" : e);
        if (! it.hasNext())
            return sb.append(']').toString();
        sb.append(',').append(' ');
    }
}::::::::::::::
Lab2ECDriver.java
::::::::::::::
import java.io.*;

/*
 * Purpose: Data Structure and Algorithms Lab 2 EC Extra Credit
 * Status: Complete and thoroughly tested
 * Last update: 09/19/22
 * Submitted:  09/19/22
 * Comment: test suite and sample run attached
 * Comment: I declare that this is entirely my own work
 * @author: William Carr
 * @version: 2023.09.19
 */

public class Lab2ECDriver {

    static BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
    
    public static void main(String[] args) throws NumberFormatException, IOException {

        ListArrayBasedPlusMore myList = new ListArrayBasedPlusMore();

        System.out.println("Select from the following menu:\n"
                           +"\t0. Exit program\n"
                           +"\t1. Insert item into the list\n"
                           +"\t2. Remove item from the list\n"
                           +"\t3. Get item from the list\n"
                           +"\t4. Clear the list\n"
                           +"\t5. Print size and content of the list\n"
                           +"\t6. Reverse the list\n");

        int selection;
        boolean continuing = true;
        do {

            System.out.print("Make your menu selection now: ");
            selection = Integer.parseInt(stdin.readLine().trim());
            System.out.println(selection);

            switch(selection) {
            case 1:
                addToList(myList);
                break;
            case 2:
                removeFromList(myList);
                break;
            case 3:
                getFromList(myList);
                break;
            case 4:
                emptyList(myList);
                break;
            case 5:
                printList(myList);
                break;
            case 6:
                reverseList(myList);
                break;
            default: // continuing unless told to stop
                continuing = false;
                System.out.println("Exiting program... Goodbye!");
                break;
            }

        } while(continuing);

    }

    public static void addToList(ListInterface list) throws IOException{
        System.out.print("You are now inserting an item"+
                         " into the list.\n\tEnter item: ");
        String itemName = stdin.readLine().trim();
        System.out.println(itemName);

        System.out.print("\tEnter position to insert item in: ");
        int position = Integer.parseInt(stdin.readLine().trim());
        System.out.println(position);
        if(position < 0 || position > list.size())
            System.out.println("Position specified is out of range!\n");
        else {
            list.add(position, itemName);
            System.out.printf("Item %s inserted into"+
                              " position %d in the list.%n%n", itemName, position);
        }
    }

    public static void removeFromList(ListInterface list) throws IOException{
        System.out.print("\tEnter position to remove item from: ");
        int position = Integer.parseInt(stdin.readLine().trim());
        System.out.println(position);
        if(position < 0 || position >= list.size())
            System.out.println("Position specified is out of range!\n");
        else {
            System.out.printf("Item %s removed from"+
                                " position %d in the list.%n%n", list.remove(position).toString(), position);
        }
    }

    public static void getFromList(ListInterface list) throws IOException{
        System.out.print("\tEnter position to retrieve item from: ");
        int position = Integer.parseInt(stdin.readLine().trim());
        System.out.println(position);
        if(position < 0 || position >= list.size())
            System.out.println("Position specified is out of range!\n");
        else {
            System.out.printf("Item %s retrieved from"+
                              " position %d in the list.%n%n", list.get(position).toString(), position);
        }
    }

    public static void emptyList(ListInterface list) {
        list.removeAll();
        System.out.println();
    }

    /**
     * Prints list after checking for null/empty
     * @param list
     */
    public static void printList(ListInterface list) {
        if(list == null || list.size() == 0)
            System.out.println("\tList is empty.\n");
        else
            System.out.printf("\tList of size %d has the following items: %s%n%n",
                              list.size(), list.toString());
    }

    public static void reverseList(ListArrayBasedPlus list) {
        list.reverse();
        System.out.println("List reversed\n");
    }

}::::::::::::::
ListArrayBasedPlusMore.java
::::::::::::::

/*
 * Purpose: Data Structure and Algorithms Lab 2 Extra Credit
 * Status: Complete and thoroughly tested
 * Last update: 09/19/22
 * Submitted:  09/19/22
 * Comment: test suite and sample run attached
 * Comment: I declare that this is entirely my own work
 * @author: William Carr
 * @version: 2023.09.19
 */

public class ListArrayBasedPlusMore extends ListArrayBasedPlus {

    /**
     * More efficient version of add
     */
    public void add(int index, Object item) {
        resize();
        if (index >= 0 && index <= numItems)
        {
            System.arraycopy(items, index, items, index+1, numItems - index);
            items[index] = item;
            numItems++;
        }
        else
        {
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on add");
        }
    }

}::::::::::::::
Lab2ECSampleruns.txt
::::::::::::::
Select from the following menu:
	0. Exit program
	1. Insert item into the list
	2. Remove item from the list
	3. Get item from the list
	4. Clear the list
	5. Print size and content of the list
	6. Reverse the list

Make your menu selection now: 5
	List is empty.

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Data
	Enter position to insert item in: 0
Item Data inserted into position 0 in the list.

Make your menu selection now: 5
	List of size 1 has the following items: Data

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Beverly
	Enter position to insert item in: 0
Item Beverly inserted into position 0 in the list.

Make your menu selection now: 5
	List of size 2 has the following items: Beverly Data

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Jean-Luc
	Enter position to insert item in: 4
Position specified is out of range!

Make your menu selection now: 5
	List of size 2 has the following items: Beverly Data

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Jean-Luc
	Enter position to insert item in: 2
Item Jean-Luc inserted into position 2 in the list.

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Geordi
	Enter position to insert item in: 1
Item Geordi inserted into position 1 in the list.

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Worf
	Enter position to insert item in: 3
Item Worf inserted into position 3 in the list.

Make your menu selection now: 5
	List of size 5 has the following items: Beverly Geordi Data Worf Jean-Luc

Make your menu selection now: 6
List reversed

Make your menu selection now: 5
	List of size 5 has the following items: Jean-Luc Worf Data Geordi Beverly

Make your menu selection now: 2
	Enter position to remove item from: 5
Position specified is out of range!

Make your menu selection now: 2
	Enter position to remove item from: 3
Item Geordi removed from position 3 in the list.

Make your menu selection now: 5
	List of size 4 has the following items: Jean-Luc Worf Data Beverly

Make your menu selection now: 2
	Enter position to remove item from: 0
Item Jean-Luc removed from position 0 in the list.

Make your menu selection now: 1
You are now inserting an item into the list.
	Enter item: Will
	Enter position to insert item in: 1
Item Will inserted into position 1 in the list.

Make your menu selection now: 5
	List of size 4 has the following items: Worf Will Data Beverly

Make your menu selection now: 3
	Enter position to retrieve item from: 2
Item Data retrieved from position 2 in the list.

Make your menu selection now: 3
	Enter position to retrieve item from: 0
Item Worf retrieved from position 0 in the list.

Make your menu selection now: 3
	Enter position to retrieve item from: 7
Position specified is out of range!

Make your menu selection now: 5
	List of size 4 has the following items: Worf Will Data Beverly

Make your menu selection now: 6
List reversed

Make your menu selection now: 5
	List of size 4 has the following items: Beverly Data Will Worf

Make your menu selection now: 4

Make your menu selection now: 5
	List is empty.

Make your menu selection now: 0
Exiting program... Goodbye!
